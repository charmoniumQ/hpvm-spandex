digraph structs {
	node [shape=record];
	"laplacianEstimate" [label="{<i0>float* Is|<i1>i64 bytesIs|<i2>float* B|<i3>i64 bytesB|<i4>float* L|<i5>i64 bytesL|<i6>i64 m|<i7>i64 n}|laplacianEstimate|{<o0>i64}"];
	"edgeDetection.exit" [label="{<i0>i64}|edgeDetection.exit|{<o0>i64}"];
	"rejectZeroCrossings" [label="{<i0>float* S|<i1>i64 bytesS|<i2>float* G|<i3>i64 bytesG|<i4>float* maxG|<i5>i64 bytesMaxG|<i6>float* E|<i7>i64 bytesE|<i8>i64 m|<i9>i64 n}|rejectZeroCrossings|{<o0>i64}"];
	"computeMaxGradientLeaf" [label="{<i0>float* G|<i1>i64 bytesG|<i2>float* maxG|<i3>i64 bytesMaxG|<i4>i64 m|<i5>i64 n}|computeMaxGradientLeaf|{<o0>i64}"];
	"gaussianSmoothing" [label="{<i0>float* I|<i1>i64 bytesI|<i2>float* Gs|<i3>i64 bytesGs|<i4>float* Is|<i5>i64 bytesIs|<i6>i64 m|<i7>i64 n}|gaussianSmoothing|{<o0>i64|<o1>i64}"];
	"edgeDetection.entry" [label="{<i0>float* I|<i1>i64 bytesI|<i2>float* Is|<i3>i64 bytesIs|<i4>float* L|<i5>i64 bytesL|<i6>float* S|<i7>i64 bytesS|<i8>float* G|<i9>i64 bytesG|<i10>float* maxG|<i11>i64 bytesMaxG|<i12>float* E|<i13>i64 bytesE|<i14>float* Gs|<i15>i64 bytesGs|<i16>float* B|<i17>i64 bytesB|<i18>float* Sx|<i19>i64 bytesSx|<i20>float* Sy|<i21>i64 bytesSy|<i22>i64 m|<i23>i64 n|<i24>i64 block_x|<i25>i64 grid_x}|edgeDetection.entry|{<o0>float*|<o1>i64|<o2>float*|<o3>i64|<o4>float*|<o5>i64|<o6>float*|<o7>i64|<o8>float*|<o9>i64|<o10>float*|<o11>i64|<o12>float*|<o13>i64|<o14>float*|<o15>i64|<o16>float*|<o17>i64|<o18>float*|<o19>i64|<o20>float*|<o21>i64|<o22>i64|<o23>i64|<o24>i64|<o25>i64}"];
	"computeZeroCrossings" [label="{<i0>float* L|<i1>i64 bytesL|<i2>float* B|<i3>i64 bytesB|<i4>float* S|<i5>i64 bytesS|<i6>i64 m|<i7>i64 n}|computeZeroCrossings|{<o0>i64}"];
	"computeGradient" [label="{<i0>float* Is|<i1>i64 bytesIs|<i2>float* Sx|<i3>i64 bytesSx|<i4>float* Sy|<i5>i64 bytesSy|<i6>float* G|<i7>i64 bytesG|<i8>i64 m|<i9>i64 n}|computeGradient|{<o0>i64}"];

	"rejectZeroCrossings" -> "edgeDetection.exit" [tailport=o0, headport=i0, ];
	"edgeDetection.entry" -> "rejectZeroCrossings" [tailport=o12, headport=i6, ];
	"edgeDetection.entry" -> "computeMaxGradientLeaf" [tailport=o11, headport=i3, ];
	"edgeDetection.entry" -> "computeMaxGradientLeaf" [tailport=o10, headport=i2, ];
	"edgeDetection.entry" -> "rejectZeroCrossings" [tailport=o10, headport=i4, ];
	"edgeDetection.entry" -> "rejectZeroCrossings" [tailport=o9, headport=i3, ];
	"edgeDetection.entry" -> "computeGradient" [tailport=o9, headport=i7, ];
	"edgeDetection.entry" -> "computeMaxGradientLeaf" [tailport=o8, headport=i0, ];
	"edgeDetection.entry" -> "computeGradient" [tailport=o8, headport=i6, ];
	"edgeDetection.entry" -> "rejectZeroCrossings" [tailport=o8, headport=i2, ];
	"edgeDetection.entry" -> "computeGradient" [tailport=o21, headport=i5, ];
	"computeGradient" -> "computeMaxGradientLeaf" [tailport=o0, headport=i1, ];
	"edgeDetection.entry" -> "computeGradient" [tailport=o20, headport=i4, ];
	"edgeDetection.entry" -> "gaussianSmoothing" [tailport=o3, headport=i5, ];
	"edgeDetection.entry" -> "computeGradient" [tailport=o18, headport=i2, ];
	"edgeDetection.entry" -> "rejectZeroCrossings" [tailport=o13, headport=i7, ];
	"edgeDetection.entry" -> "laplacianEstimate" [tailport=o2, headport=i0, ];
	"edgeDetection.entry" -> "gaussianSmoothing" [tailport=o2, headport=i4, ];
	"edgeDetection.entry" -> "computeGradient" [tailport=o2, headport=i0, ];
	"edgeDetection.entry" -> "computeZeroCrossings" [tailport=o17, headport=i3, ];
	"edgeDetection.entry" -> "laplacianEstimate" [tailport=o17, headport=i3, ];
	"edgeDetection.entry" -> "gaussianSmoothing" [tailport=o14, headport=i2, ];
	"gaussianSmoothing" -> "laplacianEstimate" [tailport=o0, headport=i1, ];
	"computeMaxGradientLeaf" -> "rejectZeroCrossings" [tailport=o0, headport=i5, ];
	"edgeDetection.entry" -> "gaussianSmoothing" [tailport=o0, headport=i0, ];
	"edgeDetection.entry" -> "gaussianSmoothing" [tailport=o15, headport=i3, ];
	"gaussianSmoothing" -> "computeGradient" [tailport=o1, headport=i1, ];
	"edgeDetection.entry" -> "gaussianSmoothing" [tailport=o1, headport=i1, ];
	"edgeDetection.entry" -> "computeMaxGradientLeaf" [tailport=o22, headport=i4, ];
	"edgeDetection.entry" -> "computeZeroCrossings" [tailport=o22, headport=i6, ];
	"edgeDetection.entry" -> "rejectZeroCrossings" [tailport=o22, headport=i8, ];
	"edgeDetection.entry" -> "laplacianEstimate" [tailport=o22, headport=i6, ];
	"edgeDetection.entry" -> "gaussianSmoothing" [tailport=o22, headport=i6, ];
	"edgeDetection.entry" -> "computeGradient" [tailport=o22, headport=i8, ];
	"edgeDetection.entry" -> "laplacianEstimate" [tailport=o16, headport=i2, ];
	"edgeDetection.entry" -> "computeZeroCrossings" [tailport=o16, headport=i2, ];
	"edgeDetection.entry" -> "computeZeroCrossings" [tailport=o7, headport=i5, ];
	"edgeDetection.entry" -> "computeZeroCrossings" [tailport=o23, headport=i7, ];
	"edgeDetection.entry" -> "computeMaxGradientLeaf" [tailport=o23, headport=i5, ];
	"edgeDetection.entry" -> "rejectZeroCrossings" [tailport=o23, headport=i9, ];
	"edgeDetection.entry" -> "laplacianEstimate" [tailport=o23, headport=i7, ];
	"edgeDetection.entry" -> "gaussianSmoothing" [tailport=o23, headport=i7, ];
	"edgeDetection.entry" -> "computeGradient" [tailport=o23, headport=i9, ];
	"edgeDetection.entry" -> "computeZeroCrossings" [tailport=o4, headport=i0, ];
	"edgeDetection.entry" -> "laplacianEstimate" [tailport=o4, headport=i4, ];
	"edgeDetection.entry" -> "computeGradient" [tailport=o19, headport=i3, ];
	"edgeDetection.entry" -> "laplacianEstimate" [tailport=o5, headport=i5, ];
	"edgeDetection.entry" -> "computeZeroCrossings" [tailport=o6, headport=i4, ];
	"edgeDetection.entry" -> "rejectZeroCrossings" [tailport=o6, headport=i0, ];
	"laplacianEstimate" -> "computeZeroCrossings" [tailport=o0, headport=i1, ];
	"computeZeroCrossings" -> "rejectZeroCrossings" [tailport=o0, headport=i1, ];
}
